# Filter unnecessary fields from the input, and map extra fields
<filter docker.source>
   @type       record_transformer
   enable_ruby true
   remove_keys ["_SOURCE_REALTIME_TIMESTAMP","_SYSTEMD_UNIT","_HOSTNAME","CONTAINER_NAME","_GID","_CAP_EFFECTIVE","SYSLOG_FACILITY","PRIORITY","_BOOT_ID","_CMDLINE","_COMM","_EXE","_SYSTEMD_CGROUP","_SYSTEMD_SLICE","_TRANSPORT","_UID","__CURSOR","__MONOTONIC_TIMESTAMP","_SELINUX_CONTEXT","__REALTIME_TIMESTAMP","_PID","CONTAINER_ID","CONTAINER_ID_FULL","_MACHINE_ID","_SYSTEMD_INVOCATION_ID"]
   <record>
      SERVICE_NAME      ${record["CONTAINER_NAME"] != nil && record["CONTAINER_NAME"].split("_").length >= 2 ? record["CONTAINER_NAME"].split("_")[1].split(".")[0] : "" }
      transaction_id    ${ /\btransaction_id=(?<transaction_id>[A-Za-z0-9\-_:]+)/ =~ record["MESSAGE"] && transaction_id != nil ? transaction_id : "" }
      platform          up-k8s
      SYSTEMD_UNIT      ${record["_SYSTEMD_UNIT"]}
      HOSTNAME          ${record["_HOSTNAME"]}
      LOGTIME           ${time.to_i.to_s + time.usec.to_s}
      MESSAGE           ${record["MESSAGE"] != nil ? record["MESSAGE"].gsub(/(?i)api_?key(?-i)=[^\s&]+/, 'apiKey=********') : record["MESSAGE"] } # obfuscate API Keys (if there are any)
      environment       "#{ENV['ENVIRONMENT_NAME']}"
      POD_NAME          ${record["CONTAINER_NAME"] != nil && record["CONTAINER_NAME"].split("_").length >= 2 ? record["CONTAINER_NAME"].split("_")[2].split(".")[0] : "" }
      MACHINE_ID        ${record["_MACHINE_ID"]}
   </record>
</filter>
# Split log stream via retagging of the events
<match docker.source>

   @type rewrite_tag_filter
   emit_mode batch
   # Filter out events with synthetic requests, healthchecks or excessive volume mount logs.
   <rule>
      key   MESSAGE
      pattern \/__health|\"transaction_id\":\"SYNTHETIC-REQ|\/__gtg|transaction_id=SYNTHETIC-REQ|MountVolume.SetUp succeeded for volume
      tag blacklisted.message
   </rule>

   # Filter out blacklisted container tags
   <rule>
      key   CONTAINER_TAG
      pattern gcr.io\/google_containers\/heapster|gcr.io\/google_containers\/kubedns-amd64|gcr.io\/google_containers\/addon-resizer|coco\/resilient-splunk-forwarder
      tag blacklisted.tags
   </rule>

   # Filter out blacklisted services
   
   <rule>
      key   SERVICE_NAME
      pattern resilient-splunk-forwarder
      tag blacklisted.services
   </rule>

   # Filter out docker daemon logs
   <rule>
      key   SYSLOG_IDENTIFIER
      pattern dockerd
      tag blacklisted.syslogids
   </rule>
   
   # Tag annotations events for monitoring purposes, later redirected to Kinesis
   <rule>
      key   MESSAGE
      pattern /\"monitoring_event\":\"true/
      tag docker.annotations
   </rule>
   
   # Tag rest of the journald services 
   <rule>
      key   SYSTEMD_UNIT
      pattern kubelet.service
      tag   docker.service_name.kubelet
   </rule>

   # Re-route logs to tags that include their service name (for per-service processing)
   <rule>
     key     SERVICE_NAME
     pattern (.+)
     tag     docker.service_name.$1
   </rule>

</match>

# Remove fields used for blacklisting groups above
<filter docker.**> 
    @type       record_transformer
    enable_ruby true
    remove_keys ["CONTAINER_TAG", "SYSLOG_IDENTIFIER"]
</filter>

#### START PARSE Section ###### 
#Attempt to parse MESSAGE field as JSON

<filter docker.**>
    @type parser
    key_name MESSAGE
    # Remove MESSAGE field if parsing is successful
    remove_key_name_field true
    reserve_data true 
    emit_invalid_record_to_error false
    <parse>
       # Parse MESSAGE field as json, and merge the new fields into the log message
       time_key LOGTIME
       keep_time_key true
       @type json
    </parse>
</filter>

#Parse Varnish logs (via custom regex)
<filter docker.service_name.*>
    @type parser
    key_name MESSAGE
    # Remove MESSAGE field if parsing is successful
    remove_key_name_field true
    reserve_data true
    emit_invalid_record_to_error false
    <parse>
          @type regexp
          expression /^[\d\.\,\s]+\s+(?<authuser>\S+)\s+[\w:\/]+\s+(?<uri>\S+)\s+(?<status>[0-9]{3}|[-]{1})\s+(?<resptime>[0-9\.]+)\s+\"(?<useragent>[\S\s]+)\"\stransaction_id=(?<transaction_id>[\S]+)+\s+(?<other>\w+)/
    </parse>
</filter>

#### END PARSE Section #####

# Add event_time as kinesis doesn't support @time (Annotations logs only)
<filter docker.annotations>
    @type       record_transformer
    enable_ruby true
    <record>
      event_time        ${ record["@time"] != nil ? record["@time"] : "" }
    </record>
</filter>

# SPLUNK requires two mandatory fields - > event and time. All log data is put in event field, time field is based on epoch format.
<filter docker.service_name.*> 
    @type       record_transformer
    enable_ruby true
    <record>
       event            ${record}
       time             ${record["LOGTIME"]}
    </record>
    # Keep only event and time field
    renew_record true
    keep_keys event, time
</filter>