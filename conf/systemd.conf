# Read logs from journald from the docker systemd unit.
<source>
  @type systemd
  filters [{ "_SYSTEMD_UNIT": "docker.service" }]
  pos_file /var/log/fluentd-journald-docker.pos
  read_from_head true
  tag docker.source
</source>

# Filter unnecessary fields from the input, and generate the SERVICE_NAME field.
<filter docker.source>
   @type record_transformer
   enable_ruby true
   remove_keys ["CONTAINER_NAME", "CONTAINER_TAG", "_GID","_CAP_EFFECTIVE","SYSLOG_FACILITY","PRIORITY","SYSLOG_IDENTIFIER","_BOOT_ID","_CMDLINE","_COMM","_EXE","_SYSTEMD_CGROUP","_SYSTEMD_SLICE","_TRANSPORT","_UID","__CURSOR","__MONOTONIC_TIMESTAMP","_SELINUX_CONTEXT","__REALTIME_TIMESTAMP","_PID","CONTAINER_ID","CONTAINER_ID_FULL","MACHINE_ID","_SOURCE_REALTIME_TIMESTAMP","_SYSTEMD_INVOCATION_ID"]
   <record>
      SERVICE_NAME ${ record["CONTAINER_NAME"] != nil && record["CONTAINER_NAME"].split("_").length >= 2 ? record["CONTAINER_NAME"].split("_")[1].split(".")[0] : "" }
   </record>
</filter>

# Re-route logs to tags that include their service name (for per-service processing)
<match docker.source>
   @type rewrite_tag_filter
   <rule>
      key     SERVICE_NAME
      pattern (.+)
      tag     docker.service_name.$1
   </rule>
</match>

# Parse the MESSAGE field as json, and merge the new fields into the log message
<filter docker.service_name.* >
   @type parser
   format json
   key_name MESSAGE
</filter>
