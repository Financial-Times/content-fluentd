# Filter unnecessary fields from the input, and map extra fields
<filter docker.source>
   @type       record_transformer
   enable_ruby true
   remove_keys ["_SYSTEMD_UNIT","_HOSTNAME","CONTAINER_NAME","_GID","_CAP_EFFECTIVE","SYSLOG_FACILITY","PRIORITY","_BOOT_ID","_CMDLINE","_COMM","_EXE","_SYSTEMD_CGROUP","_SYSTEMD_SLICE","_TRANSPORT","_UID","__CURSOR","__MONOTONIC_TIMESTAMP","_SELINUX_CONTEXT","__REALTIME_TIMESTAMP","_PID","CONTAINER_ID","CONTAINER_ID_FULL","_MACHINE_ID","_SYSTEMD_INVOCATION_ID"]
   <record>
      SERVICE_NAME      ${ record["CONTAINER_NAME"] != nil && record["CONTAINER_NAME"].split("_").length >= 2 ? record["CONTAINER_NAME"].split("_")[1].split(".")[0] : "" }
      transaction_id    ${ /\btransaction_id=(?<transaction_id>[A-Za-z0-9\-_:]+)/ =~ record["MESSAGE"] && transaction_id != nil ? transaction_id : "" }
      platform          upp-k8s
      SYSTEMD_UNIT      ${record["_SYSTEMD_UNIT"]}
      HOSTNAME          ${record["_HOSTNAME"]}
      MESSAGE           ${ record["MESSAGE"] != nil ? record["MESSAGE"].gsub(/(?i)api_?key(?-i)=[^\s&]+/, 'apiKey=********') : record["MESSAGE"] } # obfuscate API Keys (if there are any)
      environment       "#{ENV['ENVIRONMENT_NAME']}"
      POD_NAME          ${ record["CONTAINER_NAME"] != nil && record["CONTAINER_NAME"].split("_").length >= 2 ? record["CONTAINER_NAME"].split("_")[2].split(".")[0] : "" }
      event_time        ${ record["@time"] != nil ? record["@time"] : "" }
   </record>
</filter>
# Retagging
<match docker.source>
   @type rewrite_tag_filter
   emit_mode batch
   # Filter out events with synthetic requests, healthchecks or excessive volume mount logs.
   <rule>
      key MESSAGE
      pattern \/__health|\"transaction_id\":\"SYNTHETIC-REQ|\/__gtg|transaction_id=SYNTHETIC-REQ|MountVolume.SetUp succeeded for volume
      tag blacklisted.message
   </rule>

   # Filter out blacklisted container tags
   <rule>
      key CONTAINER_TAG
      pattern gcr.io\/google_containers\/heapster|gcr.io\/google_containers\/kubedns-amd64|gcr.io\/google_containers\/addon-resizer|coco\/resilient-splunk-forwarder
      tag blacklisted.tags
   </rule>

   # Filter out docker daemon logs
   <rule>
      key SYSLOG_IDENTIFIER
      pattern dockerd
      tag blacklisted.syslogids
   </rule>

   <rule>
      key MESSAGE
      pattern /\"monitoring_event\":\"true/
      tag docker.annotations
   </rule>

   # Re-route logs to tags that include their service name (for per-service processing)
   <rule>
     key     SERVICE_NAME
     pattern (.+)
     tag     docker.services
   </rule>

</match>
# <filter docker.annotations>
#    @type       record_transformer
#    enable_ruby true
#    <record>
      
#    </record>
# </filter>

#Attempt to parse the MESSAGE field as JSON
# <filter docker.service_name.*>
#    @type parser
#    key_name MESSAGE

#    reserve_data true
#    emit_invalid_record_to_error false
    
#    <parse>
#       # Parse the MESSAGE field as json, and merge the new fields into the log message
#       @type json
#    </parse>
# </filter>

# #Parse Varnish logs
# <filter docker.service_name.*>
#     @type parser
#     key_name MESSAGE

#     reserve_data true
#     emit_invalid_record_to_error false
#     <parse>
#           @type regexp
#           expression /^[\d\.\,\s]+\s+(?<authuser>\S+)\s+[\w:\/]+\s+(?<uri>\S+)\s+(?<status>[0-9]{3}|[-]{1})\s+(?<resptime>[0-9\.]+)\s+\"(?<useragent>[\S\s]+)\"\stransaction_id=(?<transaction_id>[\S]+)+\s+(?<other>\w+)/
#     </parse>
# </filter>

<filter docker.services>
      @type       record_transformer
      enable_ruby true
      remove_keys ["CONTAINER_TAG","SYSLOG_IDENTIFIER","_SOURCE_REALTIME_TIMESTAMP","SERVICE_NAME","transaction_id","platform","SYSTEMD_UNIT","HOSTNAME","MESSAGE","environment","POD_NAME","event_time"]
      <record>
       event            ${record}
       time             ${record["_SOURCE_REALTIME_TIMESTAMP"]}
      </record>
</filter>

#Check if this can be removed/overcomed

#<filter docker.services> 
#     @type       record_transformer
#     enable_ruby true
#     <record>
#        event            ${record}
#        time             ${record["_SOURCE_REALTIME_TIMESTAMP"]}
#     </record>
# </filter>

# <filter docker.services> 
#    @type       record_transformer
#    enable_ruby true
# #   renew_record true
#    keep_keys event, time
# </filter>